% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/help_files.R
\name{qsave_pipe}
\alias{qsave_pipe}
\title{qsave_pipe}
\usage{
qsave_pipe(x, scon, shuffle_control = 15L, check_hash=TRUE, check_mode=TRUE)
}
\arguments{
\item{x}{the object to serialize.}

\item{scon}{A string or an R connection (opened in "wb" mode).}

\item{shuffle_control}{An integer setting the use of byte shuffle compression.  A value between 0 and 15 (Default 15).  See details.}

\item{check_hash}{Default TRUE, compute a hash which can be used to verify file integrity during serialization}

\item{check_mode}{Check mode of connection object (should be "wb"), default: TRUE}
}
\description{
Saves (serializes) an object to a R connection.
}
\details{
This function serializes and compresses an R object to a stream using an R connection, e.g. a `pipe`, or a file descriptor if scon is a string. 
The R connection could be file descriptor handle to an external compression algorithm, to a socket etc.  
Note: this is not compatible with the `qsave/qread` set of functions, as `qs` has no way to know what happens after writing to the stream.  
If your data is important, make sure you know what happens on the other side of the pipe.  See examples for usage.
}
\examples{
\dontrun{
x <- data.frame(int = sample(1e3, replace=TRUE), 
                 num = rnorm(1e3), 
                 char = randomStrings(1e3), stringsAsFactors = FALSE)

# Example 1: using Brotli as external compression
bsave <- "brotli > myfile.br"
qsave_pipe(x, connection = bsave) # pipe to Brotli's stdin
close(bsave)
bread <- "brotli -dc myfile.br"
x2 <- qread_pipe(connection = bread) # read from output of Brotli's stdout
close(bread)
identical(x, x2) # returns true

# Example 2: using built in gzip
gsave <- gzfile("myfile.gz", "wb")
qsave_pipe(x, connection = bsave)
close(gsave)
gread <- gzfile("myfile.gz", "rb")
x2 <- qread_pipe(connection = gread)
close(gread)
identical(x, x2) # returns true
}
}
